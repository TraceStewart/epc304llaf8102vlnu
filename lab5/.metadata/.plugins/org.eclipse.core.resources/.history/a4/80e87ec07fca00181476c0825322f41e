#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/debug.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "inc/hw_gpio.h"
#include "driverlib/rom.h"

#define PWM_FREQUENCY 55

// Constants for min & max LED brightness
#define MIN_BRIGHT 100
#define MAX_BRIGHT 900

int main(void)
{
    /* Volatile variables - cannot be eliminated by compiler */
    volatile uint32_t ui32Load;         // PWM count to be placed in Load register
    volatile uint32_t ui32PWMClock;     // PWM clock (CPU_Clock / 64)
    volatile uint16_t brightness = 500; // LED brightness
        // changed size from 1 byte to 2 bytes


    /* Clock SETUP: CPU (40 MHz) & PWM (40 MHz / 64 = 625 KHz)  */
    ROM_SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);
    ROM_SysCtlPWMClockSet(SYSCTL_PWMDIV_64);


    /* PWM SETUP */
    // enable PWM1 & Port F peripherals
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

    // set PF1 as a PWM output
    ROM_GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_1);
    ROM_GPIOPinConfigure(GPIO_PF1_M1PWM5);
        // switch to PWM module 1, generator 5 based on datasheet for PF1

    // unlock the GPIO commit control register for Port F
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = 0;

    // set PF0 & PF4 as inputs with internal pull-up resistors
    ROM_GPIODirModeSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_DIR_MODE_IN);
    ROM_GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

    // set PWM as a down-counter & load count value based on desired PWM frequency
    ui32PWMClock = SysCtlClockGet() / 64;
    ui32Load = (ui32PWMClock / PWM_FREQUENCY) - 1;
    PWMGenConfigure(PWM1_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN);
        // change from gen 0 to gen 2 based on datasheet for PF1
    PWMGenPeriodSet(PWM1_BASE, PWM_GEN_2, ui32Load);
        // change from gen 0 to gen 2 based on datasheet for PF1

    // set pulse width based on adjust & load value AND enable PWM as output and to run
    ROM_PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, brightness * ui32Load / 1000);
        // change from out 0 to out 5 based on datasheet for PF1
    ROM_PWMOutputState(PWM1_BASE, PWM_OUT_5_BIT, true);
        // change from out 0 to out 5 based on datasheet for PF1
    ROM_PWMGenEnable(PWM1_BASE, PWM_GEN_2);
        // change from gen 0 to gen 2 based on datasheet for PF1


    while(1){
        // check for SW0 button press => decrease LED brightness
        if(ROM_GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)==0x00){
            // check LED brightness for lower limit => replace with lower limit (10%)
            if (--brightness < MIN_BRIGHT)
                brightness = MIN_BRIGHT;
            ROM_PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, brightness * ui32Load / 1000);
        }

        // check for SW1 button press => increase LED brightness
        if(ROM_GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00){
            // check LED brightness for upper limit => replace with upper limit (90%)
            if (++brightness > MAX_BRIGHT)
                brightness = MAX_BRIGHT;
            ROM_PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, brightness * ui32Load / 1000);
        }
        ROM_SysCtlDelay(100000);
    }
}
